import React, { useState, useEffect } from 'react';
import './App.css';

const BACKEND_URL = 'https://script.google.com/macros/s/AKfycbzib6C9lGk23Zemy9f0Vj78E5eK8-TQBIaZEGPE5l0FT2Kc0-vDbdfK5xsRG58qmseGsA/exec';

export default function App() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [characterName, setCharacterName] = useState('');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [token, setToken] = useState(0);
  const [item, setItem] = useState(null);
  const [view, setView] = useState('login');
  const [adminUser, setAdminUser] = useState('');
  const [adminTokens, setAdminTokens] = useState(0);
  const [history, setHistory] = useState([]);
  const [rate, setRate] = useState([]);
  const [itemList, setItemList] = useState([]);
  const [fadingItemList, setFadingItemList] = useState([]);
  const [isDrawing, setIsDrawing] = useState(false); // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≥
  const [showCard, setShowCard] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á display card

  const fetchHistory = async () => {
    const res = await fetch(`${BACKEND_URL}?action=gethistory`);
    const data = await res.json();
    setHistory(data.slice(0, 10));
  };

  const fetchItemList = async () => {
    const res = await fetch(`${BACKEND_URL}?action=itemlist`);
    const data = await res.json();
    setItemList(data);
  };

  const fetchRate = async () => {
    const res = await fetch(`${BACKEND_URL}?action=getrate`);
    const data = await res.json();
    setRate(data);
  };

  const handleAuth = async (action) => {
    const params = new URLSearchParams({ action, username, password });
    const res = await fetch(BACKEND_URL, { method: 'POST', body: params });
    const result = await res.json();

    if (result.status === 'LoginSuccess') {
      setIsLoggedIn(true);
      setToken(result.token || 0);
      setView(result.role === 'admin' ? 'admin' : 'dashboard');
      fetchHistory();
      fetchRate();
      fetchItemList();
    } else if (result.status === 'Registered') {
      alert('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      setView('login');
    } else if (result.status === 'UsernameAlreadyExists') {
      alert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    } else if (result.status === 'InvalidCredentials') {
      alert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.status);
    }
  };

 const handleDraw = async () => {
  if (isDrawing) return; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å
  setIsDrawing(true); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isDrawing ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
  setShowCard(false); // ‡∏ã‡πà‡∏≠‡∏ô display card ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà

  if (token <= 0) {
    alert('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°!');
    setIsDrawing(false);
    return;
  }

  if (!characterName) {
    alert('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡πà‡∏°!');
    setIsDrawing(false);
    return;
  }

  const url = `${BACKEND_URL}?username=${username}&character=${characterName}`;
  const res = await fetch(url);
  const data = await res.json();

  if (data === 'NotEnoughTokens') {
    alert('Token ‡πÑ‡∏°‡πà‡∏û‡∏≠!');
    setIsDrawing(false);
    return;
  }

  setItem(data); // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ
  setToken((prev) => prev - 1); // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Token
  fetchHistory();

  // ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  let rollingItems = [...itemList.filter(i => i.item !== data.item)];
  const randomIndex = Math.floor(Math.random() * (rollingItems.length + 1));
  rollingItems.splice(randomIndex, 0, { item: data.item }); // <--- ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡πà‡∏°

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ opacity ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
  const fadingItems = rollingItems.map(item => ({ ...item, opacity: 1 }));
  setFadingItemList([...fadingItems]);

  // ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  let indexToFade = [...Array(fadingItems.length - 1).keys()];
  indexToFade = indexToFade.sort(() => Math.random() - 0.5);

  let current = 0;
  const fadeInterval = setInterval(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏Å‡∏ñ‡∏∂‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    if (current >= fadingItems.length - 1) {
      setFadingItemList(prevState => {
        const lastItem = [...prevState];
        lastItem[lastItem.length - 1].opacity = 1; // ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏∞‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ
        return lastItem;
      });

      // ‡πÅ‡∏™‡∏î‡∏á display card ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
      setTimeout(() => {
        setShowCard(true);
      }, 300);  // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô

      clearInterval(fadeInterval);
      setIsDrawing(false);  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isDrawing ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
      return;
    }

    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const fadingIndex = indexToFade[current];
    fadingItems[fadingIndex].opacity = 0;
    setFadingItemList([...fadingItems]);

    current++;
  }, 300); // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å 300ms
};


        clearInterval(fadeInterval);
        setIsDrawing(false);  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isDrawing ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        return;
      }

      // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      const fadingIndex = indexToFade[current];
      fadingItems[fadingIndex].opacity = 0;
      setFadingItemList([...fadingItems]);

      current++;
    }, 300); // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å 300ms
  };

  const handleAdminAddToken = async () => {
    const params = new URLSearchParams({
      action: 'addtoken',
      username: adminUser,
      token: adminTokens,
    });
    const res = await fetch(BACKEND_URL, { method: 'POST', body: params });
    const result = await res.json();
    alert(result.status === 'TokenAdded' ? '‡πÄ‡∏ï‡∏¥‡∏° Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ');
  };

  return (
    <div className="app-container">
      {view === 'login' && (
        <div className="auth-container">
          <h2>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
          <input className="input-field" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" value={username} onChange={(e) => setUsername(e.target.value)} />
          <input className="input-field" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          <button className="btn" onClick={() => handleAuth('login')}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
          <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ? <span className="link" onClick={() => setView('register')}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</span></p>
        </div>
      )}

      {view === 'register' && (
        <div className="auth-container">
          <h2>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
          <input className="input-field" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" value={username} onChange={(e) => setUsername(e.target.value)} />
          <input className="input-field" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          <button className="btn" onClick={() => handleAuth('register')}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</button>
          <p>‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß? <span className="link" onClick={() => setView('login')}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</span></p>
        </div>
      )}

      {view === 'dashboard' && (
        <div className="container">
          <div className="dashboard-container">
            <h2>üéÆ N-age Warzone Gacha!!</h2>
            <div className="token-display">Token ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {token}</div>
            <input className="input-field" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" value={characterName} onChange={(e) => setCharacterName(e.target.value)} />
            <button className="btn btn-gacha" onClick={handleDraw} disabled={isDrawing}>‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° üîÆ</button>

            <div className="item-list-container">
              {fadingItemList.map((item, index) => (
                <div className="item" key={index} style={{ opacity: item.opacity, transition: 'opacity 0.5s ease' }}>
                  {item.item}
                </div>
              ))}
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á display card ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à */}
            {showCard && item && (
              <div className="item-display-card">
                <div className="item-name">üéÅ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {item.item}</div>
                <div className="character-name">‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: {item.character}</div>
              </div>
            )}

            <button className="btn btn-logout" onClick={() => { setIsLoggedIn(false); setView('login'); }}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
          </div>

          <div className="history-container">
            <h3>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°</h3>
            <table className="history-table">
              <thead>
                <tr>
                  <th>‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£</th>
                  <th>‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</th>
                  <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                </tr>
              </thead>
              <tbody>
                {history.map((entry, index) => (
                  <tr key={index}>
                    <td>{entry.character}</td>
                    <td>{entry.item}</td>
                    <td>{entry.timestamp}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="rate-container">
            <h3>‡πÄ‡∏£‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°</h3>
            <table className="rate-table">
              <thead>
                <tr>
                  <th>Item</th>
                  <th>Rate</th>
                </tr>
              </thead>
              <tbody>
                {rate.map((entry, index) => (
                  <tr key={index}>
                    <td>{entry.item}</td>
                    <td>{entry.rate}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
}
