import React, { useState } from 'react';
import './App.css';

const BACKEND_URL = 'https://script.google.com/macros/s/AKfycbzib6C9lGk23Zemy9f0Vj78E5eK8-TQBIaZEGPE5l0FT2Kc0-vDbdfK5xsRG58qmseGsA/exec';
const ITEM_LIST = [
  '‡∏î‡∏≤‡∏ö‡πÄ‡∏ó‡∏û', '‡πÄ‡∏Å‡∏£‡∏≤‡∏∞‡πÄ‡∏´‡∏•‡πá‡∏Å', '‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏±‡∏Å‡∏£‡∏ö', '‡∏õ‡∏µ‡∏Å‡∏õ‡∏µ‡∏®‡∏≤‡∏à',
  '‡∏¢‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á', '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°', '‡πÇ‡∏•‡πà‡πÄ‡∏ß‡∏ó', '‡∏´‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡∏ü‡πâ‡∏≤',
  '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏£‡πá‡∏ß', '‡πÅ‡∏´‡∏ß‡∏ô‡πÄ‡∏ß‡∏ó‡∏¢‡πå‡∏°‡∏ô‡∏ï‡∏£‡πå'
];

export default function App() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [characterName, setCharacterName] = useState('');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [token, setToken] = useState(0);
  const [item, setItem] = useState(null);
  const [view, setView] = useState('login');
  const [adminUser, setAdminUser] = useState('');
  const [adminTokens, setAdminTokens] = useState(0);
  const [isRolling, setIsRolling] = useState(false);

  const handleAuth = async (action) => {
    const params = new URLSearchParams({ action, username, password });
    const res = await fetch(BACKEND_URL, { method: 'POST', body: params });
    const result = await res.json();

    if (result.status === 'LoginSuccess') {
      setIsLoggedIn(true);
      setToken(result.token || 0);
      setView(result.role === 'admin' ? 'admin' : 'dashboard');
    } else if (result.status === 'Registered') {
      alert('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      setView('login');
    } else if (result.status === 'UsernameAlreadyExists') {
      alert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    } else if (result.status === 'InvalidCredentials') {
      alert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.status);
    }
  };

  const handleDraw = async () => {
    if (token <= 0) return alert('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°!');
    if (!characterName) return alert('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡πà‡∏°!');
    if (isRolling) return;

    setIsRolling(true);
    setItem(null);

    const url = `${BACKEND_URL}?username=${username}&character=${characterName}`;
    const res = await fetch(url);
    const data = await res.json();

    if (data === 'NotEnoughTokens') {
      alert('Token ‡πÑ‡∏°‡πà‡∏û‡∏≠!');
      setIsRolling(false);
    } else {
      setTimeout(() => {
        setItem(data);
        setToken((prev) => prev - 1);
        setIsRolling(false);
      }, 3000);
    }
  };

  const handleAdminAddToken = async () => {
    const params = new URLSearchParams({
      action: 'addtoken',
      username: adminUser,
      token: adminTokens,
    });
    const res = await fetch(BACKEND_URL, { method: 'POST', body: params });
    const result = await res.json();
    alert(result.status === 'TokenAdded' ? '‡πÄ‡∏ï‡∏¥‡∏° Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ');
  };

  return (
    <div className="app-container">
      {view === 'login' && (
        <div className="auth-container">
          <h2>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
          <input className="input-field" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" value={username} onChange={(e) => setUsername(e.target.value)} />
          <input className="input-field" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          <button className="btn" onClick={() => handleAuth('login')}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
          <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ? <span className="link" onClick={() => setView('register')}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</span></p>
        </div>
      )}

      {view === 'register' && (
        <div className="auth-container">
          <h2>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
          <input className="input-field" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" value={username} onChange={(e) => setUsername(e.target.value)} />
          <input className="input-field" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          <button className="btn" onClick={() => handleAuth('register')}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</button>
          <p>‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß? <span className="link" onClick={() => setView('login')}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</span></p>
        </div>
      )}

      {view === 'dashboard' && (
        <div className="dashboard-container dashboard-card">
          <h2>üéÆ N-age Warzone Gacha!!</h2>
          <div className="token-display">Token ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {token}</div>

          <input className="input-field" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" value={characterName} onChange={(e) => setCharacterName(e.target.value)} />
          <button className="btn btn-gacha" onClick={handleDraw} disabled={isRolling}>
            {isRolling ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°...' : '‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° üîÆ'}
          </button>

          {isRolling && (
            <div className="rolling-container">
              <div className="rolling-strip">
                {Array(30).fill(null).map((_, i) => (
                  <div className="rolling-item" key={i}>
                    {ITEM_LIST[Math.floor(Math.random() * ITEM_LIST.length)]}
                  </div>
                ))}
              </div>
            </div>
          )}

          {item && !isRolling && (
            <div className="item-display-card">
              <div className="item-name">üéÅ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {item.item}</div>
              <div className="character-name">‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: {item.character}</div>
            </div>
          )}

          <button className="btn btn-logout" onClick={() => { setIsLoggedIn(false); setView('login'); }}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
        </div>
      )}

      {view === 'admin' && (
        <div className="admin-container">
          <h2>üõ†Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô - ‡πÄ‡∏ï‡∏¥‡∏° Token</h2>
          <input className="input-field" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" value={adminUser} onChange={(e) => setAdminUser(e.target.value)} />
          <input className="input-field" placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Token" type="number" value={adminTokens} onChange={(e) => setAdminTokens(Number(e.target.value))} />
          <button className="btn" onClick={handleAdminAddToken}>‡πÄ‡∏ï‡∏¥‡∏° Token</button>
          <button className="btn btn-logout" onClick={() => { setIsLoggedIn(false); setView('login'); }}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
        </div>
      )}
    </div>
  );
}
