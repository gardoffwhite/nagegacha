import React, { useState } from 'react';
import './App.css';

const ITEM_LIST = [
  '‡∏î‡∏≤‡∏ö‡πÄ‡∏ó‡∏û', '‡πÄ‡∏Å‡∏£‡∏≤‡∏∞‡πÄ‡∏´‡∏•‡πá‡∏Å', '‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏±‡∏Å‡∏£‡∏ö', '‡∏õ‡∏µ‡∏Å‡∏õ‡∏µ‡∏®‡∏≤‡∏à',
  '‡∏¢‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á', '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°', '‡πÇ‡∏•‡πà‡πÄ‡∏ß‡∏ó', '‡∏´‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡∏ü‡πâ‡∏≤',
  '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏£‡πá‡∏ß', '‡πÅ‡∏´‡∏ß‡∏ô‡πÄ‡∏ß‡∏ó‡∏¢‡πå‡∏°‡∏ô‡∏ï‡∏£‡πå'
];

export default function App() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [characterName, setCharacterName] = useState('');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [token, setToken] = useState(0);
  const [item, setItem] = useState(null);
  const [isRolling, setIsRolling] = useState(false);
  const [history, setHistory] = useState([]);
  const [adminRates, setAdminRates] = useState({
    '‡∏î‡∏≤‡∏ö‡πÄ‡∏ó‡∏û': 10,
    '‡πÄ‡∏Å‡∏£‡∏≤‡∏∞‡πÄ‡∏´‡∏•‡πá‡∏Å': 20,
    '‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏±‡∏Å‡∏£‡∏ö': 15,
    '‡∏õ‡∏µ‡∏Å‡∏õ‡∏µ‡∏®‡∏≤‡∏à': 5,
    '‡∏¢‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á': 10,
    '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°': 10,
    '‡πÇ‡∏•‡πà‡πÄ‡∏ß‡∏ó': 10,
    '‡∏´‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡∏ü‡πâ‡∏≤': 5,
    '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏£‡πá‡∏ß': 5,
    '‡πÅ‡∏´‡∏ß‡∏ô‡πÄ‡∏ß‡∏ó‡∏¢‡πå‡∏°‡∏ô‡∏ï‡∏£‡πå': 10
  });

  const handleDraw = async () => {
    if (token <= 0) return alert('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°!');
    if (!characterName) return alert('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡πà‡∏°!');
    if (isRolling) return;

    setIsRolling(true);
    setItem(null);

    // Randomly select an item
    const randomItem = ITEM_LIST[Math.floor(Math.random() * ITEM_LIST.length)];

    setTimeout(() => {
      setItem({ item: randomItem, character: characterName });
      setToken(prev => prev - 1);
      setHistory(prevHistory => [...prevHistory, { character: characterName, item: randomItem }]);
      setIsRolling(false);
    }, 5000);
  };

  return (
    <div className="app-container">
      {isLoggedIn && (
        <div className="main-container">
          <div className="middle-section">
            <h2>üéÆ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°</h2>
            <div className="token-display">Token ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {token}</div>
            <input
              className="input-field"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
              value={characterName}
              onChange={(e) => setCharacterName(e.target.value)}
            />
            <button className="btn btn-gacha" onClick={handleDraw} disabled={isRolling}>
              {isRolling ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°...' : '‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° üîÆ'}
            </button>
            {isRolling && (
              <div className="rolling-container">
                <div className="rolling-strip">
                  {Array(30).fill(null).map((_, i) => (
                    <div className="rolling-item" key={i}>
                      {ITEM_LIST[Math.floor(Math.random() * ITEM_LIST.length)]}
                    </div>
                  ))}
                </div>
              </div>
            )}
            {item && !isRolling && (
              <div className="item-display-card">
                <div className="item-name">üéÅ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {item.item}</div>
                <div className="character-name">‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: {item.character}</div>
              </div>
            )}
          </div>

          <div className="right-section">
            <h2>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°</h2>
            <table className="rate-table">
              <thead>
                <tr>
                  <th>‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°</th>
                  <th>‡∏≠‡∏±‡∏ï‡∏£‡∏≤ (%)</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(adminRates).map(([item, rate]) => (
                  <tr key={item}>
                    <td>{item}</td>
                    <td>{rate}</td>
                  </tr>
                ))}
              </tbody>
            </table>

            <h3>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°</h3>
            <table className="history-table">
              <thead>
                <tr>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£</th>
                  <th>‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</th>
                </tr>
              </thead>
              <tbody>
                {history.map((entry, index) => (
                  <tr key={index}>
                    <td>{entry.character}</td>
                    <td>{entry.item}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
}
